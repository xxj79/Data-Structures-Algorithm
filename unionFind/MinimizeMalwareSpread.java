package unionFind;

import java.util.*;

public class MinimizeMalwareSpread {
    class UF{
	int[] id;
	int[] count; //用来计数每棵树所含node数量
	
	UF(int n){
	    id = new int[n];
	    count = new int[n];
	    for(int i = 0; i<n; i++){
		id[i] = i;
		count[i] = 1;
	    }
	}
	
	int find(int x){
	    if(x != id[x]){
		id[x] = find(id[x]);
	    }
	    return id[x];
	}
	
	void union(int x, int y){
	    int idx = find(x), idy = find(y);
	    if(idx == idy) return;
	    
	    id[idx] = idy;
	    count[idy] += count[idx];
	}
    }
    
    public int minMalwareSpread(int[][] graph, int[] initial){
	int n = graph.length;
	UF uf = new UF(n);
	
	for(int i = 0; i<n; i++){
	    for(int j = i+1; j<n; j++){
		if(graph[i][j] == 1){
		    uf.union(i, j);
		}
	    }
	}
	
	//找到只含一个mal node的树里面最大的树，如果没有这样的树就返回最小mal index
	Map<Integer, Integer> map = new HashMap<>();
	for(int i : initial){
	    int r = uf.find(i);
	    map.put(r, map.getOrDefault(i, 0) + 1);
	}
	
	Arrays.sort(initial);
	int ret = -1, max = -1;
	for(int i : initial){
	    int r = uf.find(i);
	    int saved = map.get(r) == 1 ? uf.count[r] : 0;
	    if(saved > max){
		ret = i;
		max = saved;
	    }
	}
	return ret;
    }
}
